import axios from "axios";
import type { GetStaticProps, GetStaticPropsResult, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { ColorComponent, ColorProps } from "../components/colors.component";
import { NameProps } from "../components/nameday.component";
import { Time } from "../components/time.component";
import {
  WeatherComponent,
  WeatherProps,
} from "../components/weather.component";
import { WeatherMaxMinResponseString } from "../src/interface/WeatherString";
import { findLast } from "../src/repository/weather.repository";
import styles from "../styles/Home.module.css";
import { findLastColor } from "./api/color";
import { getFirstName } from "./api/settings";
import { getMaxMinWeather } from "./api/weather-max";

interface IndexProps {
  name: NameProps;
  weather: WeatherProps;
  color: ColorProps;
}

const Home: NextPage<IndexProps> = (props) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Office Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.grid}>
          <div className={styles.card}>
            <Time date={props.name.date} name={props.name.name} />
          </div>
          <div className={styles.card}>
            <WeatherComponent
              weather={props.weather.weather}
              weatherMinMax={props.weather.weatherMinMax}
            />
          </div>
          <div className={styles.card}>
            <ColorComponent colorHex={props.color.colorHex} />
          </div>
        </div>
      </main>
    </div>
  );
};

export const getStaticProps: GetStaticProps = async (
  context
): Promise<GetStaticPropsResult<IndexProps>> => {

  const name = await getFirstName()
  const weather = await findLast();
  const color = await findLastColor();
  const weatherMinMax = await getMaxMinWeather();

  if (!name || !weather || !color || !color.colorHex) {
    throw Error("No data fetched!");
  }

  const weatherString = {
    cpuTemp: weather.cpuTemp.toString(),
    indoorTemp: weather.indoorTemp.toString(),
    outdoorTemp: weather.outdoorTemp.toString(),
    humidity: weather.humidity.toString(),
    pressure: weather.pressure.toString(),
    created: weather.created!.toISOString(),
  };

  const weatherMinMaxString: WeatherMaxMinResponseString = {
    cpuTemp: {
      max: {
        value: weatherMinMax.cpuTemp.max.value.toNumber(),
        date: weatherMinMax.cpuTemp.max.date.toISOString(),
      },
      min: {
        value: weatherMinMax.cpuTemp.min.value.toNumber(),
        date: weatherMinMax.cpuTemp.min.date.toISOString(),
      },
    },
    indoorTemp: {
      max: {
        value: weatherMinMax.indoorTemp.max.value.toNumber(),
        date: weatherMinMax.indoorTemp.max.date.toISOString(),
      },
      min: {
        value: weatherMinMax.indoorTemp.min.value.toNumber(),
        date: weatherMinMax.indoorTemp.min.date.toISOString(),
      },
    },
    outdoorTemp: {
      max: {
        value: weatherMinMax.outdoorTemp.max.value.toNumber(),
        date: weatherMinMax.outdoorTemp.max.date.toISOString(),
      },
      min: {
        value: weatherMinMax.outdoorTemp.min.value.toNumber(),
        date: weatherMinMax.outdoorTemp.min.date.toISOString(),
      },
    },
    humidity: {
      max: {
        value: weatherMinMax.humidity.max.value.toNumber(),
        date: weatherMinMax.humidity.max.date.toISOString(),
      },
      min: {
        value: weatherMinMax.humidity.min.value.toNumber(),
        date: weatherMinMax.humidity.min.date.toISOString(),
      },
    },
    pressure: {
      max: {
        value: weatherMinMax.pressure.max.value.toNumber(),
        date: weatherMinMax.pressure.max.date.toISOString(),
      },
      min: {
        value: weatherMinMax.pressure.min.value.toNumber(),
        date: weatherMinMax.pressure.min.date.toISOString(),
      },
    },
    created: weatherMinMax.created.toISOString(),
  };

  return {
    revalidate: 60,
    props: {
      name: { date: name.created.toDateString(), name: name.value },
      weather: { weather: weatherString, weatherMinMax: weatherMinMaxString },
      color: { colorHex: color.colorHex },
    },
  };
};

export default Home;
